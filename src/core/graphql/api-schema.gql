# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  isCorrect: Boolean
  questionId: String
  question: Question
  url: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Category {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  questions: [Question!]!
}

type Question {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  answers: [Answer!]
  category: Category
  categoryId: String
}

type QuizAnswer {
  id: String
  content: String
}

type QuizCategory {
  id: String
  name: String
}

type Quiz {
  id: String
  content: String
  answers: [QuizAnswer!]
  category: QuizCategory
  createdAt: DateTime
}

type Metadata {
  url: String
}

type QuizResult {
  result: Boolean
  metadata: Metadata
}

type User {
  id: ID!
  name: String!
  email: String!

  """Roles del Usuario"""
  roles: [Roles!]!
  isActive: Boolean
  userId: String!

  """lastUpdateBy"""
  lastUpdateBy: User

  """updateBy"""
  updateBy: [User!]
  createdAt: String!
  updatedAt: String!
}

"""Roles validos para el usuario (admin, user, superUser). """
enum Roles {
  admin
  user
  superUser
}

type AuthResponse {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!

  """User"""
  user: User!
}

type Owner {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  appartments: [Appartment!]
  user: User
  userId: ID
}

type Tenant {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  appartment: [Appartment!]
  user: User
  userId: String
}

type Building {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  address: String
  location: String
  floors: Float
  letter: String
  appartments: [Appartment!]!
}

type Appartment {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  owner: Owner
  ownerId: String
  tenant: Tenant
  tenantId: String
  building: Building
  buildingId: String
}

type Query {
  questions: [Question!]!
  question(id: String!): Question!
  answers(offset: Int = 0, limit: Int = 100, search: String): [Answer!]!
  answer(id: String!): Answer!
  categories: [Category!]!
  category(id: String!): Category!
  quiz(input: QuizDTO!): Quiz!
  doQuiz(input: CheckAnswerDTO!): QuizResult!
  user(id: ID!): User!
  revalidate: AuthResponse!
  Appartments: [Appartment!]!
  Appartment(id: String!): Appartment!
  buildings: [Building!]!
  building(id: String!): Building!
  Owners: [Owner!]!
  Owner(id: String!): Owner!
  tenants: [Tenant!]!
  tenant(id: String!): Tenant!
}

input QuizDTO {
  categoryId: String
}

input CheckAnswerDTO {
  quizId: String
  selectedAnswerId: String
}

type Mutation {
  createQuestion(input: CreateQuestionDTO!): Question!
  updateQuestion(input: UpdateQuestionDTO!): Question!
  deleteQuestion(id: String!): Question!
  createAnswer(input: CreateAnswerDTO!): Answer!
  updateAnswer(input: UpdateAnswerDTO!): Answer!
  deleteAnswer(id: String!): Answer!
  createCategory(input: CreateCategoryDTO!): Category!
  updateCategory(input: CreateCategoryDTO!): Category!
  deleteCategory(id: String!): Category!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  blockUser(id: ID!): User!
  signup(input: SignupInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  createAppartment(input: CreateAppartmentDTO!): Appartment!
  updateAppartment(input: UpdateAppartmentDTO!): Appartment!
  deleteAppartment(id: String!): Appartment!
  createBuilding(input: CreateBuildingDTO!): Building!
  updateBuilding(input: UpdateBuildingDTO!): Building!
  deleteBuilding(id: String!): Building!
  createOwner(input: CreateOwnerDTO!): Owner!
  updateOwner(input: UpdateOwnerDTO!): Owner!
  deleteOwner(id: String!): Owner!
  createTenant(input: CreateTenantDTO!): Tenant!
  updateTenant(input: UpdateTenantDTO!): Tenant!
  deleteTenant(id: String!): Tenant!
}

input CreateQuestionDTO {
  content: String!
  categoryId: String!
}

input UpdateQuestionDTO {
  content: String
  categoryId: String
  id: String!
}

input CreateAnswerDTO {
  content: String
  isCorrect: Boolean
  questionId: String
  url: String
}

input UpdateAnswerDTO {
  content: String
  isCorrect: Boolean
  questionId: String
  url: String
  id: String!
}

input CreateCategoryDTO {
  name: String
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input UpdateUserInput {
  email: String
  name: String
  password: String
  id: ID!
  roles: [Roles!]
  isActive: Boolean
  userId: String
}

input SignupInput {
  email: String!
  name: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateAppartmentDTO {
  content: String!
  buildingId: ID!
}

input UpdateAppartmentDTO {
  content: String
  buildingId: ID
  id: ID!
}

input CreateBuildingDTO {
  address: String
  location: String
  floors: Float
  letter: String
}

input UpdateBuildingDTO {
  address: String
  location: String
  floors: Float
  letter: String
  id: ID!
}

input CreateOwnerDTO {
  content: String!
  appartmentId: ID!
}

input UpdateOwnerDTO {
  content: String
  appartmentId: ID
  id: ID!
}

input CreateTenantDTO {
  content: String!
  userId: ID!
}

input UpdateTenantDTO {
  content: String
  userId: ID
  id: ID!
}