generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Roles {
  admin
  user
  superUser
}

model Category {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  questions Question[]

  @@index([name])
}

model Question {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  answers    Answer[]
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model Answer {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  isCorrect  Boolean   @default(false)
  url        String
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  roles     Roles[]  @default([user])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String? @unique
  lastUpdateBy User?   @relation(name: "lastUpdateByUser", fields: [userId], references: [id])
  updateBy     User[]  @relation(name: "lastUpdateByUser")

  tenant Tenant?
  owner  Owner?

  @@index([email])
}

model Building {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  address     String       @unique
  appartments Appartment[]

  @@index([address])
}

model Appartment {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  content      String
  buildingId String?
  building     Building? @relation(fields: [buildingId], references: [id])
  tenantId     String?   @unique
  tenant       Tenant?   @relation(fields: [tenantId], references: [id])
  ownerId      String?
  owner        Owner?    @relation(fields: [ownerId], references: [id])

  @@index([content])
}

//Inquilino
model Tenant {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  content     String
  appartments Appartment?
  userId      String?     @unique
  user        User?       @relation(fields: [userId], references: [id])
}

//Propietario
model Owner {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  content     String
  appartments Appartment[]
  userId      String?      @unique
  user        User?        @relation(fields: [userId], references: [id])
}


//Producto
model Product {
  id            String            @id @default(uuid())
  name          String
  photo         String
  price         Int
  stock         Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  brand         String
  carts         ProductOnOrder[]     @relation(name: "ProductOnOrder")
}


model Order {
  id        String     @id @default(uuid())
  cartItems ProductOnOrder[]    @relation(name: "ProductOnOrder")
}

model ProductOnOrder {
  product   Product @relation(name: "ProductOnOrder", fields: [productId], references: [id])
  productId String // relation scalar field (used in the `@relation` attribute above)
  order   Order @relation(name: "ProductOnOrder",fields: [orderId], references: [id])
  orderId String // relation scalar field (used in the `@relation` attribute above)
  quantity Int
  @@id([productId, orderId])
}